{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Cryptonite Wiki","text":""},{"location":"#introduction","title":"Introduction","text":"<p>This wiki is hosted by Cryptonite, the ethical hacking student project of Manipal Institute of Technology. It is aimed to give beginners an overview about the different areas of cybersecurity and CTF\u2019s.</p>"},{"location":"#motivation-for-team-cryptonite","title":"Motivation for team Cryptonite","text":"<p>Cybersecurity is the practice of protecting systems, networks, and programs from digital attacks and knowledge in this area can reduce the chances of your data being stolen and misused. The team works in the field of ethical hacking and cybersecurity. Our areas of focus are cryptography, forensics, research, reverse engineering and web exploitation. We strive to have a deeper understanding of traditional methods and techniques in cybersecurity and their implications in today\u2019s world.</p>"},{"location":"#what-is-a-ctf","title":"What is a CTF ?","text":"<p>CTF (Capture The Flag) is an information security competitions.It involves solving challenges based on different areas of cybersecurity. CTF\u2019s can help beginners get an idea about the world of cybersecurity and help experts practice their skills.</p>"},{"location":"#the-contents-of-this-wiki","title":"The contents of this wiki","text":"<p>This wiki consists of basic information about the different areas of cybersecurity like</p> <ul> <li>Reverse Engineering</li> <li>Binary Exploitation</li> <li>Cryptography</li> <li>Web Exploitation</li> <li>Forensic Analysis</li> <li>Hardware</li> </ul> <p>This wiki will hopefully provide necessary resources for a beginner to get started in the areas of cybersecurity and will help in getting better at CTF\u2019s.</p>"},{"location":"#cryptonite-archive","title":"Cryptonite archive","text":"<p>We have an archive where you can practice challenges from past ctfs that we conducted.</p>"},{"location":"attackDefense/","title":"Attack Defense","text":""},{"location":"attackDefense/#what-is-attack-and-defense-ctf","title":"What is Attack and Defense CTF?","text":"<p>Attack and Defense CTF is a type of CTF where contending teams look for security flaws in the services run by the opposition teams. Each side seeks to identify weaknesses in the services of the opposing team while defending its own, hence the term \"attack/defense\".</p> <p>Once a team finds a vulnerability in the service that they're running, the team should exploit it on their own server(s) while simultaneously patching the hole on the servers of the opposing team(s).</p> <p></p> <p>Attack and Defense CTFs are similar to Penetration testing.</p>"},{"location":"attackDefense/#penetration-testing","title":"Penetration Testing","text":"<p>What is Penetration Testing?</p> <p>A penetration test, simulates a cyberattack on your computer system to look for weaknesses that could be exploited. Insights provided by the penetration test can be used to patch detected vulnerabilities.</p> <p>Types of Penetration Testing</p> <ol> <li> <p>Network Penetration Testing     Network Penetration Testing searches for vulnerabilities in the network infrastructure such as firewalls, serves and switches.</p> </li> <li> <p>Web Application Penetration Testing     Network Penetration Testing finds vulnerabilities in Web-applications. It is a 3-step process:</p> <ol> <li>Reconnaissance : Finding information about the Web-applications such as the servers being used, operating system,       services, etc.</li> <li>Discovery : Finding the vulnerability in the application and planning the attack vector to be used.</li> <li>Attack : Exploiting the vulnerability to gain unautherized access.</li> </ol> </li> <li> <p>Wireless Penetration Testing     Wireless penetration testing is used to identify risks associated with Wireless communications services.</p> </li> <li> <p>Physical Penetration Testing     Physical penetration testing can assist in protecting an organization's physical assets from threats such credential cloning, tailgating and social engineering. </p> </li> <li> <p>Social Engineering Penetration Testing     Users are a prominent target for attackers and are frequently seen as the weakest link in the security chain. Social engineering penetration testing focuses on the organization's people, processes, and security vulnerabilities.</p> </li> <li> <p>Client-Side Penetration Testing     Software operating on client machines, such as web browsers, media players, and content creation software suites, may have security flaws that can be found via client-side penetration testing techniques.</p> </li> </ol>"},{"location":"attackDefense/#resources","title":"Resources","text":"<p>https://tryhackme.com/ has a lot of rooms to practice different skills with respect to penetration testing. Here are our picks to get you started: 1. https://tryhackme.com/room/linuxfundamentalspart1 2. https://tryhackme.com/room/linuxfundamentalspart2 3. https://tryhackme.com/room/whatisnetworking 4. https://tryhackme.com/room/basicpentestingjt 5. https://tryhackme.com/module/network-security</p>"},{"location":"basics/","title":"Basics","text":"<p>Cybersecurity is a vast ocean. You can hack anything, from a kitchen stove to a mobile phone. If you are ambitious enough, even a rocket or a nuclear power plant. The point is that anything can be hacked, and keeping \u2018anything\u2019 secure is vague and awesome. Cybersecurity touches every domain, from IoT to networks and everything in between. People can be hacked using social engineering\u2026.</p> <p>So kudos on being brave enough to apply here. Whether you make it into the team or not, we want you to fall in love with the  beauty of all things code! By reassembling, rebuilding and breaking and staring at your screen for hours, feeling tempted to  crash your computer in the wall(because of stupid assembly code) is how you will do so.</p> <p>If that last statement was scary, ignore it and join us on a #include journey and hack your way through life. <p>This is an itty-bitty guide that might come in handy whether you are a beginner or not. The author put in a huge chunk of her Sunday afternoon writing this and will accept gratitude in the form of chocolates. </p> <p>Jokes aside, here goes:</p> <ol> <li> <p>Learn to code. Choose between C++ and Python or go rogue and do Rust if you want.</p> <ul> <li>If you are a beginner, try out https://checkio.org/ for python. </li> <li>Solve questions on leetcode, in the language of your choice on a regular basis. Atleast digest one question daily.</li> <li>Go through Youtube videos, code out a question and go through terminologies that you don\u2019t understand.</li> <li>Also remember, that you will never know everything. Just keep coding daily. Don't worry about finishing a course and then     mastering a language. Trust me, a course won\u2019t help with that, but regular, daily practice, for just about 5 minutes a day, will.</li> </ul> </li> <li> <p>Figure out Linux</p> <ul> <li>Read up on the following terms: Operating System, Windows, Linux, Unix, open-source technologies, dual booting, virtual machines, WSL.</li> <li>Do either of the following if you are a Windows user:<ul> <li>Easiest option for Windows -&gt; WSL</li> <li>Install a virtual machine </li> <li>Dual Boot</li> </ul> </li> <li>Check out overthewire bandit to learn basic Linux commands. Don\u2019t worry. It\u2019s just a fun game to get acquainted with comands. Watch John Hammond\u2019s videos if you get stuck and just google anything you don\u2019t understand</li> <li>Make an account on PicoCTF and solve all the general skills questions</li> <li>Figure out what man pages are and read up on how to navigate them.</li> </ul> </li> <li> <p>CTF</p> <ul> <li>A fun game to learn about cybersecurity, scour through documentation and write neat code that does hot stuff!</li> <li>Start out with picoCTF. Try solving as many challenges as possible.</li> <li>Then check out CTF contests on CTFTime and solve them for fun.</li> <li>Fall in love with a domain and perfect your skills in them. </li> <li>There are at least 6 notable ones:<ul> <li>Cryptography</li> <li>Web Exploitation</li> <li>Forensics </li> <li>Binary Exploitation</li> <li>Attack and Defense</li> </ul> </li> </ul> </li> </ol>"},{"location":"binexp/","title":"Binary Exploitation","text":""},{"location":"binexp/#shellcode","title":"Shellcode","text":"<p>x86 assembly in byte form typically given as payload to a vulnerable program to be executed.</p>"},{"location":"binexp/#buffer-overflow","title":"Buffer Overflow","text":"<p>Typically, an insecure input function such as gets() may allow the user to modify data beyond the allowed boundaries of the memory area and potentially be able to overwrite data or even redirect program flow.</p>"},{"location":"binexp/#implications-of-buffer-overflow","title":"Implications of Buffer Overflow","text":"<ul> <li>Data already pushed to the stack can be overwritten causing incorrect or unintended behaviour.</li> <li>When a function is called, it will push a return address to the stack before setting up the stack frame. This is so that when the function is done, this return address is popped back into the EIP/RIP register to resume the caller function to continue its work. Corrupting this pushed return address will allow us to arbitrarily execute another function or executable region.</li> <li>As an extension of the previous point, we can use so called ROP gadgets to develop even more complex control flow. This is called return oriented programming.</li> <li>In some more exotic cases, the attacker may target the pushed EBP/RBP to switch to another entirely different stack of his choosing once the function returns. This is referred to as stack pivoting.</li> </ul>"},{"location":"binexp/#mitigations","title":"Mitigations","text":"<ul> <li>Stack canary: At runtime, a randomized stack cookie is added after the stack frame. If this cookie gets corrupted, the stack check will abruptly exit the program instead of returning. This prevents attempts at EIP/RIP control as well as return oriented programming.</li> <li>ASLR: Address space randomization randomizes the base address on every execution. Without any kind of leak, the attacker will be forced to bruteforce the base address. This can be a very large search space on 64 bit systems.</li> <li>NX or DEP: The stack is marked as non executable by default to thwart attempts at running shellcodes stored on stack.</li> </ul> <p>Format string exploit If input is passed directly to the first parameter of printf, the user can arbitrarily input format specifiers to leak data or even overwrite them. </p>"},{"location":"binexp/#heap-corruption","title":"Heap corruption","text":"<p>This deals with exploiting the heap allocators and corrupting the heap structures. Heap allocators tend to have a lot of attack vectors as developers have to settle for a compromise between security and performance. Typically, we will be dealing with GLIBC\u2019s allocators on Linux.</p> <p>When a memory is freed after being malloc\u2019d, this chunk gets move to a bin depending on its size. Well known ones include TCache, Fastbin, smallbin, largebin and unsorted. These bins are used to track deallocated chunks for reuse when more memory gets allocated in the future.</p>"},{"location":"binexp/#general-heap-corruption-techniques","title":"General Heap corruption techniques","text":"<ul> <li>Use after free: The user has access to memory chunk even after it has been freed. This chunk can be manipulated before it gets reused after a subsequent malloc, causing unintended behaviour if memory is not zeroed out. It can even allow for altering the heap bin structure entirely. For example, the next pointer of tcache chunk can be overwritten to arbitrarily allocate a non heap memory chunk.</li> <li>Double free: A chunk is freed twice, usually causing this chunk to be tracked in the list of freed chunks twice. The same chunk can get allocated in two different regions.</li> </ul> <p>Many mitigations have been implemented in recent GLIBC version though there are far too many to list.</p>"},{"location":"crypto/","title":"Cryptography","text":""},{"location":"crypto/#what-is-cryptography","title":"What is Cryptography","text":"<p>It is the study of secure communications techniques that allow only the sender and intended recipient of a message to view its contents.</p> <p></p> <p>Consider the following scenario where Alice wants to communicate with Bob, but doesn't want Eve to be looking at their texts. We use cryptography to encrypt the messages between Alice and Bob so that no eavesdropper like Eve can listen to their conversations.</p>"},{"location":"crypto/#encoding-and-encryption","title":"Encoding and Encryption","text":"<ul> <li>Encoding is a process of putting a sequence of characters into a special format for transmission or storage purposes.</li> <li>An example of encoding is converting ASCII characters to Hex.</li> <li>ASCII: Hello Hex: 48656c6c6f</li> <li>Encryption is the process of translation of data into a secret code. Encryption is the most effective way to achieve data security. To read an encrypted file, you must have access to a secret key or password that enables you to decrypt it.</li> <li>Making the message sent by Alice to Bob unreadable by an outsider is encryption.</li> </ul> <p>Encoding</p> <ul> <li>Base is the total number of unique elements we can use to represent data in an encoding format.</li> <li>Coming Encoding Formats:</li> <li>ASCII - American Standard Code for Information Interchange(a-z,A-Z,0-9)<ul> <li>A-Z - 65-90</li> <li>a-z - 97-122</li> <li>0-9 - 48-57</li> </ul> </li> <li>Binary - Base 2 (0, 1)</li> <li>Hex - Base 16 (0-9, a-f)</li> <li>Base 64 - (A-Z, a-z, 0-9, +, /)</li> </ul> <p>Encryption</p> <ul> <li>Basic terms in encryption:</li> <li>Plain text: The original message that is sent.</li> <li>Cipher text: Encrypted form of the plain text which doesn't have any meaning or is unreadable.</li> <li>Key: A key iis a piece of information, usually a string of numbers or letters, which, when processed through a cryptographic algorithm, can encrypt or decrypt cryptographic data.</li> </ul> <p></p> <p>In the above image, Original Data is the Plaintext and the public key is used by the sender to encrypt the plaintext. Scrambled Data in picture is the ciphertext. The intended receiver has the private key and uses it to decrypt the plaintext that they receive using the private key.</p>"},{"location":"crypto/#types-of-cryptosystems","title":"Types of Cryptosystems","text":"<ul> <li>Symmetric key Cryptosystems use the same key for encryption and decryption processes.</li> <li>Asymmetric key Cryptosystems use different keys for encryption and decryption processes.</li> <li>Public key is used by the sender to encrypt the data.</li> <li>Private key is used by the intended receiver to decrypt the ciphertext</li> </ul>"},{"location":"crypto/#substitution-ciphers","title":"Substitution Ciphers","text":"<p>Substitution ciphers encrypt the plaintext by swapping each letter or symbol in the plaintext by a different symbol as directed by the key.</p> <p></p> <p>In the above example, 'A' is substituted by 'D', 'B' with 'E' and so on.</p> <p>Caesar Cipher</p> <p>It is a type of substitution cipher in which each letter in the plaintext is 'shifted' a certain number of places down the alphabet.</p> <p></p> <p>In the above example, 'd' is substituted by 'e' and 'f' is substituted 'g' and so on. After observing the above example we can see that each letter in the plaintext is shifted by one position to the right in the alphabet.</p> <p>We can say that the shift key is 1 in the above example.</p> <p>Transposition Cipher</p> <p>Transposition cipher scrambles the position of characters without actually changing the original characters in the plaintext.</p> <p>The plaintext is rearranged according to a regular system.</p> <p>The ciphertext is a permutation of the plaintext.</p> <p>Columnar Transposition cipher</p> <p>The plaintext is written row wise with a set number of columns which is generally set as the length of the key.</p> <p>The plaintext is then read column wise based on the column numbers.</p> <p>The columns are usually defined by a keyword and the permutation is defined by the alphabetical order of the letters in the keyword.</p> <p>Example: Consider the plaintext \"hello there\" and the key is \"hey\"</p> <p>Writing the plaintext in rows:</p> <p>h e l</p> <p>l l o</p> <p>t h e</p> <p>r e x</p> <p>Here 'x' is a null that is added to the matrix to completely fill up the matrix.</p> <p>2 1 3</p> <p>h e l</p> <p>l l o</p> <p>t h e</p> <p>r e x</p> <p>Writing the plaintext based on column number we get</p> <p>elhe hltr loex</p> <p>For decryption, we need to get the column length by dividing the message length by the key length. The message can be written out in columns and reorder the columns based by reforming the key.</p>"},{"location":"crypto/#xor","title":"XOR","text":"<p>This is a encryption method which based on the XOR gate</p> <p></p> <p>Since XOR is a stream cipher, the encryption takes place bitwise</p> <ul> <li>Consider 10 XOR 15</li> <li>Convert 10 to binary =&gt; 1010 and convert 15 to binary =&gt; 1111</li> <li>10 XOR 15 is 1010 XOR 1111</li> <li>1010 XOR 1111 is 0101 which is 5</li> </ul> 10 15 10 XOR 15 1 1 0 0 1 1 1 1 0 0 1 1 <p>Properties of XOR:</p> <ul> <li>XOR is Commutative and Associative:</li> <li>a XOR b = b XOR a</li> <li>(a XOR b)XOR c = a XOR (b XOR c)</li> <li>A XOR A = 0</li> <li>A XOR 0 = A</li> <li>If Pt XOR key = Ct then</li> <li>Pt = Ct Xor key</li> <li>key = Pt XOR Ct</li> </ul> <p>Single Byte XOR</p> <ul> <li>The entirety of the plaintext is XORed with only a single character.</li> <li>This makes Single Byte XOR vulnerable to brute force attack.</li> </ul> Plaintext w e l c o m e Key = = = = = = = --- --- --- --- --- --- --- --- Ciphertext J X Q ^ R P X <p>MultiByte XOR</p> <ul> <li>A key of length n is XORed with substring of plaintext of size n.</li> <li>Provides better security than single byte xor.</li> </ul> Plaintext W E L C O M E Key q w e q w e q CIphertext &amp; 2 ) 2 8 ( 4 <p>Attacks on XOR</p> <ul> <li>Brute Force Attack:</li> <li>In this approach we try out all possible keys.</li> <li>In Single Byte XOR, if the key length is one byte i.e 8 bits which gives us 28 possibilities.</li> <li>We XOR the ciphertext with all possible keys and find a resulting plaintext which is human readable.</li> <li>Known Plaintext Attack:</li> <li>If we know a part of the plaintext, then we can XOR it with the corresponding part of the ciphertext to get the key.</li> </ul>"},{"location":"crypto/#modular-arithmetic","title":"Modular Arithmetic","text":"<p>When we divide two Integers A and B, we can write the division A/B in the form: A=BQ+R</p> <p>Where:</p> <ul> <li>A -&gt; Dividend</li> <li>B -&gt; Divisor</li> <li>Q -&gt; Quotient</li> <li>R -&gt; Remainder</li> </ul> <p>Modulo Operator:</p> <p>From the equation A=BQ+R we can get R by the following operation:</p> <ul> <li>R = A%B or R = A mod B</li> <li>Eg: 19%15 = 4</li> </ul> <p>The value of R is always between 0 and B i.e 0 \\&lt;= R \\&lt; B</p> <p>Modulo Inverse:</p> <p>Given a modular arithmetic A mod B:</p> <ul> <li>Modular inverse of A exists on B if, A and B are co primes i.e GCD(A,B) = 1</li> </ul> <p>If 1 = A*C mod B then C is said to be the modular inverse of A on B.</p>"},{"location":"crypto/#basic-rsa","title":"Basic RSA","text":"<ul> <li>RSA algorithm is asymmetric cryptography algorithm.</li> <li>Asymmetric actually means that it works on two different keys i.e. Public Key and Private Key</li> <li>Public Key is given to everyone and Private key is kept private.</li> </ul> <p>Generating Keys in RSA:</p> <p>Generating Public key:</p> <ul> <li>Select two prime numbers p,q</li> <li>n = p*q ; n-&gt;modulus</li> <li>phi(n) = (p-1)*(q-1)</li> <li>Select a integer 'e' such that GCD(e,phi(n)) = 1 and 1 \\&lt; e \\&lt; phi(n)</li> <li>Public Key: (e,n)</li> </ul> <p>Generating Private key:</p> <ul> <li>Calculate value of 'd':</li> <li>e*d mod phi(n) = 1 i.e d = modular inverse of e on phi(n)</li> <li>Private key : (d,n)</li> </ul> <p>Basic Algorithm:</p> <p>Encryption:</p> <ul> <li>M -&gt; plaintext and M \\&lt; n</li> <li>C -&gt; ciphertext</li> <li>C = Me mod n</li> </ul> <p>Decryption:</p> <ul> <li>M = Cd mod n</li> </ul>"},{"location":"web/","title":"Web Exploitation Wiki","text":""},{"location":"web/#overview-of-web-application-security","title":"Overview of Web Application Security","text":"<p>Web Application Security is a specialized area within Information Security that focuses on safeguarding websites, web applications, and web services. It leverages application security principles specifically for the web, ensuring the integrity, confidentiality, and availability of web applications.</p>"},{"location":"web/#understanding-security-threats","title":"Understanding Security Threats","text":"<p>A security threat is a potential risk that could exploit vulnerabilities in a computer system, leading to unauthorized access or damage. These threats can be intentional, such as cyber-attacks, or accidental, such as system failures or natural disasters.</p>"},{"location":"web/#common-security-threats","title":"Common Security Threats","text":"<ul> <li> <p>Virus Threats: Viruses are malicious software programs designed to infect legitimate software, corrupt data, and modify the way applications operate without the user's consent.</p> </li> <li> <p>Hackers and Predators: The human element behind threats, hackers use their technical expertise to bypass security measures and gain unauthorized access to computer systems.</p> </li> <li> <p>Phishing: A technique used to deceive users into providing sensitive information by masquerading as a trustworthy entity in digital communication.</p> </li> </ul>"},{"location":"web/#the-owasp-top-10-vulnerabilities","title":"The OWASP Top 10 Vulnerabilities","text":"<p>The Open Web Application Security Project (OWASP) identifies the most critical web application security risks. Key vulnerabilities include Injection, Broken Authentication, Sensitive Data Exposure, XML External Entities (XXE), Broken Access Control, Security Misconfiguration, Cross-Site Scripting (XSS), Insecure Deserialization, Using Components with Known Vulnerabilities, and Insufficient Logging &amp; Monitoring.</p>"},{"location":"web/#web-development-and-security-tools","title":"Web Development and Security Tools","text":""},{"location":"web/#client-side-technologies","title":"Client-Side Technologies","text":"<ul> <li>HTML: The standard markup language for creating web pages.</li> <li>JavaScript: A programming language that enables interactive web pages.</li> <li>CSS: A style sheet language used for describing the presentation of a document written in HTML or XML.</li> <li>jQuery: A fast, small, and feature-rich JavaScript library.</li> </ul>"},{"location":"web/#server-side-languages","title":"Server-Side Languages","text":"<ul> <li>PHP</li> <li>JavaScript (Node.js)</li> <li>Ruby</li> <li>Python</li> </ul>"},{"location":"web/#important-web-mechanisms","title":"Important Web Mechanisms","text":"<ul> <li>Cookies and Sessions: Essential for managing user sessions and storing user preferences.</li> <li>HTTP Headers and Requests: Fundamental components of the HTTP protocol that facilitate client-server communication.</li> <li>HTTP Methods: GET, POST, PUT, DELETE, CONNECT, HEAD, OPTIONS, TRACE, PATCH, each serving a specific purpose in HTTP transactions.</li> </ul>"},{"location":"web/#developer-tools","title":"Developer Tools","text":"<p>Modern browsers include developer tools for debugging and testing web applications, offering features like JavaScript debugging, network analysis, and DOM manipulation.</p>"},{"location":"web/#vulnerabilities-and-exploits","title":"Vulnerabilities and Exploits","text":""},{"location":"web/#comprehensive-guide-to-in-depth-web-exploitation-learning","title":"Comprehensive Guide to In-Depth Web Exploitation Learning","text":"<p>This guide consolidates knowledge on various web exploitation techniques. Each section covers a specific vulnerability, including resources, types of solutions, and common attack methods.</p> <p>For more advanced topics, practical exercises, and essential tools, the guide includes sections on:</p> <ul> <li>Local File Inclusion (LFI) to RCE</li> <li>CSRF (Cross-Site Request Forgery)</li> <li>Directory Traversal</li> <li>WebSocket Security</li> <li>Session Hijacking</li> <li>Subdomain Takeover</li> <li>SSRF (Server-Side Request Forgery)</li> <li>Deserialization Vulnerabilities</li> <li>API Security</li> </ul> <p>This guide provides a structured approach to mastering web exploitation techniques. Engage in CTF</p> <p>challenges, contribute to open-source projects, and stay updated with the latest security trends and tools.</p>"},{"location":"web/#quick-links","title":"Quick Links","text":"<ul> <li>HackTricks</li> <li>OWASP</li> <li>The Odin Project</li> <li>JWT.io</li> <li>TryHackMe</li> <li>Hack The Box</li> <li>HackerOne</li> <li>Burp Suite</li> <li>Wireshark</li> <li>PortSwigger Web Security Academy</li> </ul> <p>Here\u2019s a detailed breakdown of each web exploitation challenge format including challenge type, resources, solution types, and potential attacks.</p>"},{"location":"web/#1-reverse-shell-exploitation","title":"1. Reverse Shell Exploitation","text":"<ul> <li>Challenge Type: Reverse Shell Access</li> <li>Resources:</li> <li>Pentestmonkey Reverse Shell Cheat Sheet</li> <li>Netcat Guide for Reverse Shells</li> <li>Types of Solutions:</li> <li>Direct Shell Invocation: Using <code>bash</code>, <code>nc</code>, or <code>Python</code> commands to redirect shell input/output to an attacker's server.</li> <li>Payload Embedding: Injecting shell commands in vulnerable applications to initiate a reverse shell connection.</li> <li>Attacks:</li> <li>Command Injection: Embedding reverse shell commands in web forms or URL parameters.</li> <li>File Upload: Uploading scripts that execute reverse shells, allowing attackers to control the server remotely.</li> </ul>"},{"location":"web/#2-cross-site-scripting-xss","title":"2. Cross-Site Scripting (XSS)","text":"<ul> <li>Challenge Type: Client-Side Injection (DOM-based, Reflected, Stored)</li> <li>Resources:</li> <li>OWASP XSS Prevention Cheat Sheet</li> <li>PortSwigger XSS Labs</li> <li>Types of Solutions:</li> <li>Client-Side Filtering: Using libraries like DOMPurify for sanitizing inputs.</li> <li>Server-Side Input Validation: Stripping or encoding dangerous characters.</li> <li>Attacks:</li> <li>Session Hijacking: Injecting scripts to steal cookies and impersonate users.</li> <li>Malware Distribution: Redirecting users to download malicious files.</li> <li>Phishing: Creating fake login forms within the website to capture user credentials.</li> </ul>"},{"location":"web/#3-sql-injection-sqli","title":"3. SQL Injection (SQLi)","text":"<ul> <li>Challenge Type: SQL Database Manipulation</li> <li>Resources:</li> <li>OWASP SQL Injection Guide</li> <li>HackTricks SQL Injection Techniques</li> <li>Types of Solutions:</li> <li>Parameterized Queries: Avoiding dynamic query concatenation and using prepared statements.</li> <li>Escaping Inputs: Using functions like <code>mysqli_real_escape_string()</code> to sanitize inputs.</li> <li>Attacks:</li> <li>Database Dump: Extracting data from the database by injecting <code>UNION SELECT</code> or <code>INFORMATION_SCHEMA</code> queries.</li> <li>Authentication Bypass: Manipulating authentication queries to gain unauthorized access.</li> <li>Blind SQL Injection: Extracting data by observing server responses without seeing the database output.</li> </ul>"},{"location":"web/#4-file-upload-vulnerabilities","title":"4. File Upload Vulnerabilities","text":"<ul> <li>Challenge Type: Unrestricted File Upload</li> <li>Resources:</li> <li>OWASP Unrestricted File Upload Guide</li> <li>PortSwigger File Upload Labs</li> <li>Types of Solutions:</li> <li>Content-Type Validation: Checking for acceptable file types (e.g., <code>.jpg</code>, <code>.png</code>).</li> <li>Filename Restrictions: Preventing executable file uploads with <code>.php</code>, <code>.js</code>, etc.</li> <li>Attacks:</li> <li>Web Shell Upload: Uploading a PHP or ASP file to execute commands.</li> <li>Malware Distribution: Hosting malicious files on the server for unsuspecting users to download.</li> <li>Remote Code Execution (RCE): Using uploaded files to run arbitrary code on the server.</li> </ul>"},{"location":"web/#5-server-side-template-injection-ssti","title":"5. Server-Side Template Injection (SSTI)","text":"<ul> <li>Challenge Type: Template Engine Manipulation</li> <li>Resources:</li> <li>HackTricks SSTI Exploitation</li> <li>PortSwigger Template Injection Labs</li> <li>Types of Solutions:</li> <li>Escape User Input: Avoid embedding user-controlled variables in templates.</li> <li>Input Filtering: Strip out special characters and dangerous input patterns.</li> <li>Attacks:</li> <li>Code Execution: Injecting code that the template engine evaluates (e.g., <code>{{7*7}}</code>).</li> <li>File Access: Using template syntax to read files (e.g., <code>{{ open('/etc/passwd').read() }}</code>).</li> <li>Data Leakage: Accessing server-side data through template variables.</li> </ul>"},{"location":"web/#6-cross-origin-resource-sharing-cors-misconfiguration","title":"6. Cross-Origin Resource Sharing (CORS) Misconfiguration","text":"<ul> <li>Challenge Type: CORS Policy Manipulation</li> <li>Resources:</li> <li>OWASP CORS Misconfiguration Guide</li> <li>PortSwigger CORS Labs</li> <li>Types of Solutions:</li> <li>Proper Policy Definition: Setting allowed origins and headers correctly.</li> <li>Avoid Wildcards: Restricting access to trusted origins only.</li> <li>Attacks:</li> <li>Data Theft: Accessing sensitive data through unauthorized CORS requests.</li> <li>Session Hijacking: Sending unauthorized requests from a malicious site.</li> <li>Credential Theft: Leveraging CORS to trick users into exposing credentials.</li> </ul>"},{"location":"web/#7-graphql-injection","title":"7. GraphQL Injection","text":"<ul> <li>Challenge Type: GraphQL Query Manipulation</li> <li>Resources:</li> <li>OWASP GraphQL Cheat Sheet</li> <li>PortSwigger GraphQL Security Labs</li> <li>Types of Solutions:</li> <li>Query Limitations: Limit query depth and restrict nested queries.</li> <li>Access Control: Ensure users can only query data they are authorized to see.</li> <li>Attacks:</li> <li>Data Enumeration: Using queries like <code>__schema</code> to map database structures.</li> <li>Sensitive Data Exposure: Accessing restricted data by exploiting weak authorization.</li> <li>Denial of Service (DoS): Crafting overly complex queries to overload the server.</li> </ul>"},{"location":"web/#8-dns-exfiltration","title":"8. DNS Exfiltration","text":"<ul> <li>Challenge Type: Data Exfiltration through DNS Requests</li> <li>Resources:</li> <li>OWASP DNS Exfiltration Guide</li> <li>SANS DNS Data Exfiltration</li> <li>Types of Solutions:</li> <li>Monitor DNS Traffic: Use IDS/IPS to detect unusual patterns.</li> <li>Restrict DNS Resolution: Limit outgoing DNS requests to trusted domains.</li> <li>Attacks:</li> <li>Data Leakage: Encoding sensitive data in DNS queries to an attacker-controlled domain.</li> <li>C2 Communication: Using DNS as a covert channel to control malware.</li> <li>Credential Theft: Extracting passwords or tokens through DNS requests.</li> </ul>"},{"location":"web/#9-hashcat-for-password-cracking","title":"9. Hashcat for Password Cracking","text":"<ul> <li>Challenge Type: Brute-Forcing Password Hashes</li> <li>Resources:</li> <li>Hashcat Documentation</li> <li>Cracking Passwords with Hashcat</li> <li>Types of Solutions:</li> <li>Dictionary Attack: Using known password lists (e.g., rockyou.txt).</li> <li>Hybrid Attack: Combining dictionary words with appended characters.</li> <li>Attacks:</li> <li>Credential Recovery: Recovering passwords from hashes to access accounts.</li> <li>Hash Cracking: Decrypting sensitive information stored as hashes.</li> <li>Authentication Bypass: Using cracked hashes to impersonate users.</li> </ul>"},{"location":"web/#10-command-injection-htmx","title":"10. Command Injection (HTMX)","text":"<ul> <li>Challenge Type: HTMX Command Injection</li> <li>Resources:</li> <li>OWASP Command Injection</li> <li>PortSwigger Command Injection Labs</li> <li>Types of Solutions:</li> <li>Sanitize Input: Avoid executing user input directly as commands.</li> <li>Whitelist Commands: Allow only safe commands or arguments.</li> <li>Attacks:</li> <li>Remote Code Execution (RCE): Gaining shell access to the server.</li> <li>Privilege Escalation: Executing commands to gain higher access levels.</li> <li>Data Manipulation: Modifying system files or configurations.</li> </ul>"},{"location":"web/#11-aws-iam-metadata-enumeration","title":"11. AWS IAM Metadata Enumeration","text":"<ul> <li>Challenge Type: AWS Metadata Information Leakage</li> <li>Resources:</li> <li>AWS Metadata Service Guide</li> <li>SSRF and AWS Metadata</li> <li>Types of Solutions:</li> <li>Metadata Filtering: Ensure metadata endpoints are accessible only from secure sources.</li> <li>Restrict SSRF: Use firewalls and IAM policies to prevent SSRF attacks on metadata.</li> <li>Attacks:</li> <li>Credential Exposure: Retrieve IAM credentials via <code>http://169.254.169.254</code> endpoint.</li> <li>Privilege Escalation: Use IAM tokens to access other AWS resources improperly.</li> </ul>"},{"location":"web/#12-aws-s3-versioning-exploitation","title":"12. AWS S3 Versioning Exploitation","text":"<ul> <li>Challenge Type: Access and Manipulation of S3 Object Versions</li> <li>Resources:</li> <li>AWS S3 Versioning</li> <li>S3 Security Best Practices</li> <li>Types of Solutions:</li> <li>Access Control Lists (ACLs): Ensure only authorized users can access versioned objects.</li> <li>Restrict Bucket Access: Limit public access and enforce MFA for sensitive objects.</li> <li>Attacks:</li> <li>Data Tampering: Access older or sensitive versions to compromise integrity.</li> <li>Unauthorized Access: Exploit publicly available S3 buckets to retrieve data.</li> </ul>"},{"location":"web/#13-brute-forcing-with-pwntools","title":"13. Brute-Forcing with Pwntools","text":"<ul> <li>Challenge Type: Password Guessing via Brute-Force</li> <li>Resources:</li> <li>Pwntools Documentation</li> <li>Brute-Force Attack Techniques</li> <li>Types of Solutions:</li> <li>Rate Limiting: Implement a delay or restrict repeated attempts.</li> <li>Captcha Verification: Use captchas to prevent automated attempts.</li> <li>Attacks:</li> <li>Password Cracking: Systematically try passwords until the correct one is found.</li> <li>Credential Stuffing: Use common passwords or leaked passwords from other breaches.</li> </ul>"},{"location":"web/#14-replay-attack-with-multi-processing","title":"14. Replay Attack with Multi-Processing","text":"<ul> <li>Challenge Type: Replay Attack Simulation</li> <li>Resources:</li> <li>OWASP Replay Attacks</li> <li>Mitigating Replay Attacks</li> <li>Types of Solutions:</li> <li>Nonce Usage: Require unique nonces for each request to prevent reuse.</li> <li>Timestamp Verification: Expire old requests by checking timestamps.</li> <li>Attacks:</li> <li>Session Reuse: Capture and reuse valid sessions or tokens.</li> <li>Data Manipulation: Repeat actions (like transfers) multiple times without detection.</li> </ul>"},{"location":"web/#15-endianness-conversion","title":"15. Endianness Conversion","text":"<ul> <li>Challenge Type: File Manipulation and Byte Reordering</li> <li>Resources:</li> <li>Endianness Explained</li> <li>Data Manipulation with Python</li> <li>Types of Solutions:</li> <li>Standardize Byte Order: Ensure data is interpreted correctly by converting to a uniform endianness.</li> <li>Attacks:</li> <li>File Corruption: Use endianness manipulation to corrupt data.</li> <li>Malicious Payload Injection: Reorder bytes to execute unexpected commands on certain systems.</li> </ul>"},{"location":"web/#16-hash-length-extension-attack","title":"16. Hash Length Extension Attack","text":"<ul> <li>Challenge Type: Hash Manipulation and Extension</li> <li>Resources:</li> <li>Hash Length Extension Attacks</li> <li>OWASP Hashing Guidelines</li> <li>Types of Solutions:</li> <li>Use HMACs: Ensure secure hash functions like HMAC to prevent hash manipulation.</li> <li>Attacks:</li> <li>Hash Forgery: Append data to an existing hash and compute a valid signature.</li> <li>Data Tampering: Modify messages without invalidating their hash.</li> </ul>"},{"location":"web/#17-image-manipulation-with-pil","title":"17. Image Manipulation with PIL","text":"<ul> <li>Challenge Type: Image Generation and Coordinate Mapping</li> <li>Resources:</li> <li>Pillow (PIL) Documentation</li> <li>Python Data Visualization with PIL</li> <li>Types of Solutions:</li> <li>Data Masking: Hide coordinates or sensitive information before plotting.</li> <li>Coordinate Verification: Ensure that image coordinates do not reveal sensitive locations.</li> <li>Attacks:</li> <li>Location Disclosure: Extract sensitive location data from plotted coordinates.</li> <li>Data Exposure: Generate images that reveal private data through visual cues.</li> </ul>"},{"location":"web/#18-pbkdf2-key-derivation-and-cracking","title":"18. PBKDF2 Key Derivation and Cracking","text":"<ul> <li>Challenge Type: Hash Cracking with PBKDF2</li> <li>Resources:</li> <li>PBKDF2 Key Derivation Function</li> <li>OWASP Password Storage</li> <li>Types of Solutions:</li> <li>Increase Iterations: Use a high iteration count to slow down cracking.</li> <li>Salt Uniquely: Add unique salts for each password to make cracking harder.</li> <li>Attacks:</li> <li>Password Cracking: Derive passwords from stored PBKDF2 hashes.</li> <li>Dictionary Attacks: Use known password lists to crack hashes with common patterns.</li> </ul>"},{"location":"web/#19-pickle-deserialization-exploitation","title":"19. Pickle Deserialization Exploitation","text":"<ul> <li>Challenge Type: Insecure Deserialization with Pickle</li> <li>Resources:</li> <li>Python Pickle Module Documentation</li> <li>Insecure Deserialization Attacks</li> <li>Types of Solutions:</li> <li>Avoid Pickle: Use safer serialization methods like JSON.</li> <li>Input Validation: Validate and sanitize data before deserializing.</li> <li>Attacks:</li> <li>Remote Code Execution: Execute arbitrary commands during deserialization.</li> <li>Data Leakage: Access and exfiltrate sensitive data using malicious objects.</li> </ul>"},{"location":"web/#20-sql-injection-with-substring-bruteforce","title":"20. SQL Injection with Substring Bruteforce","text":"<ul> <li>Challenge Type: SQL Injection with LIKE Brute-Forcing</li> <li>Resources:</li> <li>SQL Injection Cheat Sheet</li> <li>OWASP SQL Injection Prevention</li> <li>Types of Solutions:</li> <li>Parameterized Queries: Prevent SQL injection by avoiding direct string concatenation.</li> <li>Input Sanitization: Escape dangerous characters and enforce strict input validation.</li> <li>Attacks:</li> <li>Credential Stealing: Extract credentials by brute-forcing individual characters.</li> <li>Database Dumping: Leak database contents by incrementally guessing values.</li> </ul>"},{"location":"web/#21-sql-injection-with-substring-brute-force","title":"21. SQL Injection with Substring Brute-Force","text":"<ul> <li>Challenge Type: SQL Injection with Substring Brute-Forcing</li> <li>Resources:</li> <li>SQL Injection Guide - OWASP</li> <li>SQL Injection Cheat Sheet - PortSwigger</li> <li>Types of Solutions:</li> <li>Parameterization: Use parameterized queries to avoid direct SQL query construction.</li> <li>Rate Limiting: Limit repeated attempts to avoid brute-force attacks on individual characters.</li> <li>Attacks:</li> <li>Credential Extraction: Retrieve sensitive information by brute-forcing characters of values like passwords.</li> <li>Database Dumping: Slowly gather table data by iterating through substrings.</li> </ul>"},{"location":"web/#22-websocket-manipulation-and-data-streaming","title":"22. WebSocket Manipulation and Data Streaming","text":"<ul> <li>Challenge Type: WebSocket Data Manipulation</li> <li>Resources:</li> <li>WebSocket Documentation - MDN</li> <li>Real-Time WebSocket Exploits - HackTricks</li> <li>Types of Solutions:</li> <li>Event Filtering: Ensure only authorized data is processed by WebSocket listeners.</li> <li>Input Validation: Prevent data tampering by sanitizing data before handling WebSocket events.</li> <li>Attacks:</li> <li>Data Manipulation: Use WebSocket to modify and transmit crafted data.</li> <li>Information Disclosure: Leak server or user information via crafted messages sent over WebSocket.</li> </ul>"},{"location":"web/#23-character-brute-forcing-for-flag-extraction","title":"23. Character Brute-Forcing for Flag Extraction","text":"<ul> <li>Challenge Type: Character-by-Character Brute-Force for Secrets</li> <li>Resources:</li> <li>Brute-Force Techniques - OWASP</li> <li>Pentesting Firebase for Secrets</li> <li>Types of Solutions:</li> <li>Input Throttling: Limit the rate of requests to prevent brute-force attempts.</li> <li>Access Restriction: Ensure that sensitive endpoints aren\u2019t accessible to unauthorized users.</li> <li>Attacks:</li> <li>Secret Discovery: Reveal flags or sensitive strings by iteratively testing character combinations.</li> <li>Credential Exposure: Expose user credentials by discovering password characters sequentially.</li> </ul>"},{"location":"web/#24-converting-curl-to-sqlmap-commands","title":"24. Converting curl to SQLMap Commands","text":"<ul> <li>Challenge Type: Automating SQL Injection Testing with SQLMap</li> <li>Resources:</li> <li>SQLMap Documentation</li> <li>Uncurl Documentation - Python</li> <li>Types of Solutions:</li> <li>Automated Scanning: Utilize SQLMap to automate SQL injection testing.</li> <li>String Sanitization: Validate and sanitize inputs before converting them into commands.</li> <li>Attacks:</li> <li>Database Compromise: Leverage SQLMap to automatically probe for SQL injection points.</li> <li>Data Exfiltration: Dump databases using SQLMap to uncover stored information.</li> </ul>"},{"location":"web/#25-google-cloud-storage-blob-downloader","title":"25. Google Cloud Storage Blob Downloader","text":"<ul> <li>Challenge Type: Google Cloud Storage Enumeration and Download</li> <li>Resources:</li> <li>Google Cloud Storage Documentation</li> <li>Google Cloud Security Best Practices</li> <li>Types of Solutions:</li> <li>Access Control Enforcement: Set IAM roles to control access to storage buckets.</li> <li>Audit Logging: Enable logging to track access to storage resources.</li> <li>Attacks:</li> <li>Data Leakage: Download sensitive files stored in public or misconfigured buckets.</li> <li>Privilege Escalation: Access sensitive resources using compromised credentials.</li> </ul>"},{"location":"web/#26-captcha-ocr-for-bypassing-verification","title":"26. Captcha OCR for Bypassing Verification","text":"<ul> <li>Challenge Type: Bypassing Captchas using OCR</li> <li>Resources:</li> <li>Tesseract OCR Documentation</li> <li>Automated Captcha Solving - HackTricks</li> <li>Types of Solutions:</li> <li>Complex Captchas: Use advanced captcha techniques that can\u2019t be easily bypassed by OCR.</li> <li>Behavioral Analysis: Detect bot-like behavior to block automated captcha solvers.</li> <li>Attacks:</li> <li>Captcha Bypass: Use OCR to bypass captchas and automate requests.</li> <li>Account Takeover: Gain unauthorized access to accounts by bypassing captchas.</li> </ul>"},{"location":"web/#27-pwntools-based-buffer-overflow-exploitation","title":"27. Pwntools-Based Buffer Overflow Exploitation","text":"<ul> <li>Challenge Type: Exploiting Buffer Overflow for Control</li> <li>Resources:</li> <li>Pwntools Documentation</li> <li>Buffer Overflow Guide - OWASP</li> <li>Types of Solutions:</li> <li>Input Length Validation: Ensure buffers are appropriately sized for user inputs.</li> <li>Stack Protection: Enable stack canaries and ASLR to prevent overflow attacks.</li> <li>Attacks:</li> <li>Shellcode Injection: Inject shellcode to execute arbitrary commands.</li> <li>Memory Manipulation: Overwrite return addresses to control program flow.</li> </ul>"},{"location":"web/#28-simple-pin-brute-force-for-bypassing-authentication","title":"28. Simple PIN Brute-Force for Bypassing Authentication","text":"<ul> <li>Challenge Type: PIN Brute-Forcing for Authentication Bypass</li> <li>Resources:</li> <li>Brute-Force PIN Recovery - OWASP</li> <li>CAPTCHA &amp; PIN Security</li> <li>Types of Solutions:</li> <li>Throttling: Limit login attempts to prevent brute-force attacks.</li> <li>Strong PIN Requirements: Use longer, alphanumeric PINs to increase difficulty.</li> <li>Attacks:</li> <li>Authentication Bypass: Iterate through PINs to gain unauthorized access.</li> <li>Account Takeover: Gain access to accounts with weak or default PINs.</li> </ul>"},{"location":"web/#29-simple-pin-brute-force-attack","title":"29. Simple PIN Brute-Force Attack","text":"<ul> <li>Challenge Type: PIN Brute-Force Attack for Login</li> <li>Resources:</li> <li>Brute-Force Attack - OWASP</li> <li>Python Requests Library for Web Exploits</li> <li>Types of Solutions:</li> <li>Throttling Mechanism: Implement rate-limiting to prevent multiple requests.</li> <li>Multi-factor Authentication (MFA): Add MFA to increase the complexity of PIN access.</li> <li>Attacks:</li> <li>PIN Guessing: Attempts to brute-force short PINs for unauthorized access.</li> <li>Credential Discovery: Used for testing multiple combinations to gain entry into accounts with simple PINs\u301085\u2020source\u3011.</li> </ul>"},{"location":"web/#30-sql-injection-with-url-encoding","title":"30. SQL Injection with URL Encoding","text":"<ul> <li>Challenge Type: SQL Injection through URL-encoded Payloads</li> <li>Resources:</li> <li>SQL Injection Attack - OWASP</li> <li>URL Encoding in SQL Injections</li> <li>Types of Solutions:</li> <li>Parameterized Queries: Prevent SQL injections by avoiding direct query construction.</li> <li>Payload Filtering: Validate and sanitize URL-encoded strings in user inputs.</li> <li>Attacks:</li> <li>Database Enumeration: Retrieve data by injecting SQL commands through URL parameters.</li> <li>Authentication Bypass: Bypass login mechanisms by submitting payloads that alter SQL logic\u301086\u2020source\u3011.</li> </ul>"},{"location":"web/#31-prototype-pollution-in-sql-injection","title":"31. Prototype Pollution in SQL Injection","text":"<ul> <li>Challenge Type: Prototype Pollution in SQL Queries</li> <li>Resources:</li> <li>Prototype Pollution - HackTricks</li> <li>SQL Injection in Prototypes</li> <li>Types of Solutions:</li> <li>Input Validation: Block keywords like <code>__proto__</code> to prevent prototype manipulation.</li> <li>Object Freezing: Freeze objects to make them immutable against prototype changes.</li> <li>Attacks:</li> <li>Object Injection: Modify prototypes to inject arbitrary properties.</li> <li>Privilege Escalation: Use prototype pollution to influence SQL queries and gain unauthorized access\u301087\u2020source\u3011.</li> </ul>"},{"location":"web/#32-rotational-cipher-key-brute-force-tuctf-challenge","title":"32. Rotational Cipher Key Brute-Force (TUCTF Challenge)","text":"<ul> <li>Challenge Type: Brute-Forcing Rotational Ciphers</li> <li>Resources:</li> <li>Pwntools for Exploitation</li> <li>ROT Cipher Analysis</li> <li>Types of Solutions:</li> <li>Key Restriction: Use strong cryptographic ciphers instead of rotational ciphers.</li> <li>Rate Limiting: Restrict the number of decryption attempts to avoid brute-forcing.</li> <li>Attacks:</li> <li>Key Guessing: Iteratively attempt multiple rotational keys to decrypt or access data.</li> <li>Data Manipulation: Modify cipher keys to alter encrypted messages in transit\u301088\u2020source\u3011.</li> </ul>"},{"location":"web/#33-unicode-based-exploitation-in-payloads","title":"33. Unicode-Based Exploitation in Payloads","text":"<ul> <li>Challenge Type: Unicode Manipulation in Payloads</li> <li>Resources:</li> <li>Unicode Security Considerations - OWASP</li> <li>Unicode Encoding &amp; Exploits</li> <li>Types of Solutions:</li> <li>Character Encoding: Ensure payloads are encoded in a single charset to avoid multi-language injections.</li> <li>Sanitization: Validate inputs to prevent harmful characters in Unicode payloads.</li> <li>Attacks:</li> <li>Obfuscation: Use Unicode to mask or encode payloads that bypass basic filters.</li> <li>Code Injection: Exploit Unicode for command injection in different language encodings\u301089\u2020source\u3011.</li> </ul>"},{"location":"web/#34-remote-charset-detection-and-payload-transmission","title":"34. Remote Charset Detection and Payload Transmission","text":"<ul> <li>Challenge Type: Charset Identification for Payload Injection</li> <li>Resources:</li> <li>Charset Security in Payloads</li> <li>Remote Character Set Manipulation</li> <li>Types of Solutions:</li> <li>Strict Charset Definition: Define and enforce character sets for inputs and outputs.</li> <li>Payload Encoding: Encode payloads in standard charsets to avoid misinterpretation.</li> <li>Attacks:</li> <li>Remote Code Execution: Exploit charsets to manipulate code execution on remote servers.</li> <li>Payload Obfuscation: Use non-standard characters to hide payloads in transmission\u301090\u2020source\u3011.</li> </ul>"},{"location":"web/#35-path-correction-in-graph-networks-fix-paths","title":"35. Path Correction in Graph Networks (Fix Paths)","text":"<ul> <li>Challenge Type: Graph Traversal for Path Discovery</li> <li>Resources:</li> <li>Graph Theory and Pathfinding Algorithms</li> <li>Using Graphs in Exploits</li> <li>Types of Solutions:</li> <li>Shortest Path Validation: Use reliable pathfinding algorithms (e.g., Dijkstra\u2019s) for accurate paths.</li> <li>Cycle Detection: Detect and manage cycles to prevent endless traversals.</li> <li>Attacks:</li> <li>Traversal Manipulation: Alter paths in a graph to reroute or redirect processes.</li> <li>Infinite Loops: Create cyclical paths to exploit loop handling in algorithms\u301091\u2020source\u3011\u301092\u2020source\u3011.</li> </ul>"},{"location":"web/#conclusion","title":"Conclusion","text":"<p>This wiki serves as a comprehensive guide to understanding and mitigating web application vulnerabilities. By adhering to security best practices and staying informed about potential threats, developers and security professionals can safeguard web applications against exploitation.</p>"}]}